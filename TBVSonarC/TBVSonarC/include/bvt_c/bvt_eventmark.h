/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTEVENTMARK_H__
#define __BVTEVENTMARK_H__

#include <bvt_c/bvt_retval.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#else
#	if __GNUC__ >= 4
#		define BVTSDK_EXPORT __attribute__ ((visibility ("default")))
	#else
		#define BVTSDK_EXPORT
		#endif
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** \file
 * \defgroup BVTEventMark BVTEventMark Object
 * An EventMark allows the user to insert arbitrary information into a sonar file.  The user can
 * store two strings, one called a "Key" string and the other a "Text" string, in an EventMark. 
 * The EventMarks are stored and retrieved independently of Heads or Pings.
 * NOTE: EventMark objects will only be saved to a sonar of type FILE. 
 * @{
*/

/** Opaque type for the BVTEventMark object */
typedef struct BVTOpaqueEventMark* BVTEventMark;

/** Create a BVTEventMark object */
BVTSDK_EXPORT BVTEventMark BVTEventMark_Create();
/** Destroy a BVTEventMark object
 * \param obj Object pointer
*/
BVTSDK_EXPORT void BVTEventMark_Destroy(BVTEventMark obj);

/** Return the timestamp in seconds since 00:00:00 UTC, January 1, 1970 
 * The timestamp is a standard UNIX time stamp. This is 
 * a similar value to that returned by the time() C standard library 
 * function. In fact, the only difference is the addition of fractional seconds.
 * \param obj Object pointer
 */
BVTSDK_EXPORT double BVTEventMark_GetTimestamp(BVTEventMark obj);

/** Return the number of characters stored in the Key string.  You'll need to allocate a
 * character buffer of length GetKeyStringLength()+1 to retrieve the entire Key.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTEventMark_GetKeyStringLength(BVTEventMark obj);

/** Retrieves a copy of the EventMark's Key string.
 * \param obj Object pointer
 * \param buffer buffer to hold the null-terminated string to be passed back 
 * \param buffer_size total number of characters the passed buffer can hold 
 */
BVTSDK_EXPORT RetVal BVTEventMark_GetKeyString(BVTEventMark obj, char buffer[], int buffer_size);

/** Return the number of characters stored in the Text string.  You'll need to allocate a
 * character buffer of length GetTextStringLength()+1 to retrieve the entire Key.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTEventMark_GetTextStringLength(BVTEventMark obj);

/** Retrieves a copy of the EventMark's Text string.
 * \param obj Object pointer
 * \param buffer buffer to hold the null-terminated string to be passed back 
 * \param buffer_size total number of characters the passed buffer can hold 
 */
BVTSDK_EXPORT RetVal BVTEventMark_GetTextString(BVTEventMark obj, char buffer[], int buffer_size);

/** Return the "ping-by-time" number associated with the EventMark.
 * This is typically the ping immediately before the EventMark was created.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTEventMark_GetPingNum(BVTEventMark obj);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif
