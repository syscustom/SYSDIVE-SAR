/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTDATABUFFER_H__
#define __BVTDATABUFFER_H__

#include <bvt_c/bvt_retval.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#else
#	if __GNUC__ >= 4
#		define BVTSDK_EXPORT __attribute__ ((visibility ("default")))
	#else
		#define BVTSDK_EXPORT
		#endif
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** \file
 * \defgroup BVTDataBuffer BVTDataBuffer Object
 * A DataBuffer is used to pass raw bytes between the SDK and client code, instead of passing function pointers to
 * memory allocators and deallocators.
 * @{
*/

/** Opaque type for the BVTDataBuffer object */
typedef struct BVTOpaqueDataBuffer* BVTDataBuffer;

/** Create a BVTDataBuffer object */
BVTSDK_EXPORT BVTDataBuffer BVTDataBuffer_Create();
/** Destroy a BVTDataBuffer object
 * \param obj Object pointer
*/
BVTSDK_EXPORT void BVTDataBuffer_Destroy(BVTDataBuffer obj);

/** Return the length of this DataBuffer in bytes.
 * \param obj Object pointer
 * \param len The size of this DataBuffer in bytes. 
 */
BVTSDK_EXPORT RetVal BVTDataBuffer_GetLength(BVTDataBuffer obj, unsigned int* len);

/** Return a pointer to the data.
 * \param obj Object pointer
 */
BVTSDK_EXPORT const void* BVTDataBuffer_GetData(BVTDataBuffer obj);

/** Copy from the user specified buffer into this DataBuffer.
 * \param obj Object pointer
 * \param data Pointer to a valid buffer 
 * \param len The size of the buffer in bytes. 
 */
BVTSDK_EXPORT RetVal BVTDataBuffer_SetFrom(BVTDataBuffer obj, const void* data, unsigned int len);

/** Copy from this DataBuffer to the user specified buffer.
 * \param obj Object pointer
 * \param data Pointer to a valid buffer 
 * \param len The size of the buffer in bytes. 
 */
BVTSDK_EXPORT RetVal BVTDataBuffer_CopyTo(BVTDataBuffer obj, void* data, unsigned int len);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif
