/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTSONAR_H__
#define __BVTSONAR_H__

#include <bvt_c/bvt_retval.h>
#include <bvt_c/bvt_sonar.h>
#include <bvt_c/bvt_ping.h>
#include <bvt_c/bvt_head.h>
#include <bvt_c/bvt_navdata.h>
#include <bvt_c/bvt_orientation.h>
#include <bvt_c/bvt_eventmark.h>
#include <bvt_c/bvt_databuffer.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#else
#	if __GNUC__ >= 4
#		define BVTSDK_EXPORT __attribute__ ((visibility ("default")))
	#else
		#define BVTSDK_EXPORT
		#endif
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** \file
 * \defgroup BVTSonar BVTSonar Object
 * The Sonar object is the top level object in the SDK.  A sonar 
 * object embodies communication with a single physical sonar unit,
 * or file.  Each sonar contains several heads, which is where most
 * of the functionality is implemented.  Sonar also provides a
 * function to create new data files using BlueView's .son format.
 * @{
*/

/** Opaque type for the BVTSonar object */
typedef struct BVTOpaqueSonar* BVTSonar;

/** Create a BVTSonar object */
BVTSDK_EXPORT BVTSonar BVTSonar_Create();
/** Destroy a BVTSonar object
 * \param obj Object pointer
*/
BVTSDK_EXPORT void BVTSonar_Destroy(BVTSonar obj);

/** Open the sonar type 'type' using the specified parameters.
 * Allowed types (and parameters):
 * - FILE <br>
 * [filename] - Required <br>
 * - NET <br>
 * [host] - Connect to the specified host.<br>
 * \param obj Object pointer
 * \param type The type of sonar to open	
 * \param type_params Various type-specific parameters 
 */
BVTSDK_EXPORT RetVal BVTSonar_Open(BVTSonar obj, const char* type, const char* type_params);

/** Create a new data file.
 * Files are always created by 'cloning' another Sonar
 * object.  This ensures that the file receives all the
 * needed setup/configuration data needed to process 
 * images.
 * \param obj Object pointer
 * \param file_name The filename of the file to be created 
 * \param src The Sonar object to clone when creating the file 
 * \param create_params Parameters for (reserved for future use) 
 */
BVTSDK_EXPORT RetVal BVTSonar_CreateFile(BVTSonar obj, const char* file_name, const BVTSonar src, const char* create_params);

/** 
 * \param obj Object pointer
 */
BVTSDK_EXPORT RetVal BVTSonar_GetSerialNumber(BVTSonar obj, char buffer[], int buffer_size);

/** 
 * \param obj Object pointer
 */
BVTSDK_EXPORT RetVal BVTSonar_GetFirmwareRevision(BVTSonar obj, char buffer[], int buffer_size);

/** Gets the size of a file created with CreateFile(). Only works with
 * file type sonars. A networked sonar will return 0, as will a file
 * type sonar if there is no open file associated with it.
 * The return value must be multiplied by 1000 to get the actual
 * file size in bytes.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTSonar_GetFileSize(BVTSonar obj);

/** Return the number of time indexed pings in this file.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTSonar_GetTimeIndexedPingCount(BVTSonar obj);

/** Retrieve a ping from the file, using the time index.
 * The Ping will have the same Head parent that it was acquired with.
 * If this function is called on a "live" sonar (network),
 * then it always returns the FAILED (1) error.
 * \param obj Object pointer
 * \param ping_num The ping number to return 
 * \param ping The returned Ping object
 */
BVTSDK_EXPORT RetVal BVTSonar_GetTimeIndexedPing(BVTSonar obj, int ping_num, BVTPing* ping);

/** Returns 1 if this is a file that requires indexing each time it's opened. 
 * Returns 0 if this file does not need reindexing.
 * Returns -1 otherwise (e.g. this is a networked sonar or invalid sonar object)
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTSonar_NeedsIndexing(BVTSonar obj);

/** Retrieve a Head object from the sonar
 * \param obj Object pointer
 * \param head_num The head number to return 
 * \param head The returned Head object 
 */
BVTSDK_EXPORT RetVal BVTSonar_GetHead(BVTSonar obj, int head_num, BVTHead* head);

/** Return the number of heads on this sonar.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTSonar_GetHeadCount(BVTSonar obj);

/** Retrieves a copy of a short string with the model of the sonar.
 * At the time of this writing, 20 characters would easily hold all of
 * the sonar model names.
 * \param obj Object pointer
 * \param buffer buffer to hold the null-terminated string to be passed back 
 * \param buffer_size total number of characters the passed buffer can hold 
 */
BVTSDK_EXPORT RetVal BVTSonar_GetSonarTypeAsString(BVTSonar obj, char buffer[], int buffer_size);

/** Retrieves a copy of the name of the sonar. The name is set only via
 * the ProViewer application (at least at this time), or at the factory,
 * and is separate from any BlueView model designations. <br>
 * The length of the name could be considerably longer than the sonar type,
 * and there is no actual limit, though 80 characters would seem to be
 * more than enough.
 * \param obj Object pointer
 * \param buffer buffer to hold the null-terminated string to be passed back 
 * \param buffer_size total number of characters the passed buffer can hold 
 */
BVTSDK_EXPORT RetVal BVTSonar_GetSonarName(BVTSonar obj, char buffer[], int buffer_size);

/** Return the sonar's internal temperature in degrees Celsius
 * If the sonar doesn't have a temp sensor this function returns
 * absolute zero (-273.15)
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTSonar_GetTemperature(BVTSonar obj);

/** Write the object to a file.  Note that this object is not associated with a Ping.
 * \param obj Object pointer
 * \param nav_data The Navigation data object to write out 
 */
BVTSDK_EXPORT RetVal BVTSonar_PutNavData(BVTSonar obj, const BVTNavData nav_data);

/** Returns the number of NavData objects in this file.  This count does not include any NavData objects that were written to the file as part of a Ping.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTSonar_GetNavDataCount(BVTSonar obj);

/** Retrieve a NavData object from the file.
 * The index is zero-based, that is, if GetNavDataCount() returned a value of 3, then valid indices are 0, 1, and 2.
 * \param obj Object pointer
 * \param index index of NavData to return 
 * \param nav_data The returned NavData object
 */
BVTSDK_EXPORT RetVal BVTSonar_GetNavDataCopy(BVTSonar obj, int index, BVTNavData* nav_data);

/** Write the object to a file.  Note that this object is not associated with a Ping.
 * \param obj Object pointer
 * \param orient The Orientation data object to write out 
 */
BVTSDK_EXPORT RetVal BVTSonar_PutOrientation(BVTSonar obj, const BVTOrientation orient);

/** Returns the number of Orientation objects in this file.  This count does not include any Orientation objects that were written to the file as part of a Ping or a Head.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTSonar_GetOrientationCount(BVTSonar obj);

/** Retrieve a Orientation object from the file.
 * The index is zero-based, that is, if GetlOrientationCount() returned a value of 3, then valid indices are 0, 1, and 2.
 * \param obj Object pointer
 * \param index index of Orientation to return 
 * \param orient The returned Orientation object
 */
BVTSDK_EXPORT RetVal BVTSonar_GetOrientationCopy(BVTSonar obj, int index, BVTOrientation* orient);

/** Creates and writes an EventMark to the current file.
 * The key string contains arbitrary user-defined text.  The maximum length is 80 characters.
 * The text string contains arbitrary user-defined text.  The maximum length is 512 characters.
 * These strings provide a means to store raw data strings from various sensors such as a GPS or compass.
 * The Key string would be used to identify the device, e.g. "GPS", and the data string ("sentence") from 
 * the device would be stored in the Text string.
 * Note that the EventMark is not associated with a Ping.
 * \param obj Object pointer
 * \param key null-terminated character string 
 * \param text null-terminated character string 
 */
BVTSDK_EXPORT RetVal BVTSonar_PutEventMark(BVTSonar obj, const char* key, const char* text);

/** Returns the number of EventMark objects in this file.  
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTSonar_GetEventMarkCount(BVTSonar obj);

/** Retrieve an EventMark object from the file.
 * The index is zero-based, that is, if getTotalEventMarks() returned a value of 3, then valid indices are 0, 1, and 2.
 * \param obj Object pointer
 * \param index index of EventMark to return 
 */
BVTSDK_EXPORT RetVal BVTSonar_GetEventMarkCopy(BVTSonar obj, int index, BVTEventMark* em);

/** ** EXPERIMENTAL **  
 * Set this sonar from raw bytes.  A sonar opened in this manner does not support a ping count, EventMarks, or asynchronous navigation data.
 * It is implied that client code will maintain all of the unsupported data structures, if necessary.
 * \param obj Object pointer
 * \param buffer caller-allocated data containing the raw bytes describing a sonar 
 * \param bufferLength the size in bytes of the buffer as reported by the caller 
 */
BVTSDK_EXPORT RetVal BVTSonar_OpenFromBytes(BVTSonar obj, const void* buffer, unsigned int bufferLength);

/** ** EXPERIMENTAL **  
 * Get the raw bytes used to represent this sonar in memory.  This function will erase any existing data in the passed buffer.
 * \param obj Object pointer
 * \param buffer a caller created DataBuffer used to store the raw byte representation of this Sonar. 
 */
BVTSDK_EXPORT RetVal BVTSonar_CopyBytesTo(BVTSonar obj, BVTDataBuffer buffer);

/** This function will enable (true) or disable (false) the external trigger feature
 * of the sonar.  The external triggering must be present on the sonar for this
 * function to work other wise it will throw return value of 0x18000 = TRIGGER_NOT_PRESENT
 * The delay in miliseconds can not be larger than 100 miliseconds.  If the value is greater than 
 * 100 miliseconds the value will be truncated to 100 miliseconds.
 * \param obj Object pointer
 * \param enable true or false whether external trigge is enabled
 * \param delay_miliseconds delay in miliseconds from when trigger detected to when ping initiated
 */
BVTSDK_EXPORT RetVal BVTSonar_SetExternalTrigger(BVTSonar obj, int enable, unsigned int delay_miliseconds);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif
