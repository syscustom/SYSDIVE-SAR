/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTHEAD_H__
#define __BVTHEAD_H__

#include <bvt_c/bvt_retval.h>
#include <bvt_c/bvt_ping.h>
#include <bvt_c/bvt_orientation.h>
#include <bvt_c/bvt_databuffer.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#else
#	if __GNUC__ >= 4
#		define BVTSDK_EXPORT __attribute__ ((visibility ("default")))
	#else
		#define BVTSDK_EXPORT
		#endif
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** \file
 * \defgroup BVTHead BVTHead Object
 * A head consists of a group of co-planar transducers which are
 * operated simultaneously to produce (ultimately) a single 2d
 * image.  The Head object provides functions to change the 
 * range window as well as produce pings.
 * @{
*/

/** Opaque type for the BVTHead object */
typedef struct BVTOpaqueHead* BVTHead;

/** ** EXPERIMENTAL **  
 * Specifies how to handle overlapped beams in specialized sonars.  This function
 * should only be used under direction from BlueView.
 * \param obj Object pointer
 * \param opt Option int 
 */
BVTSDK_EXPORT RetVal BVTHead_SetOverlapOption(BVTHead obj, int opt);

/** ** EXPERIMENTAL **  
 * Returns current option for how to handle overlapped beams in specialized sonars.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetOverlapOption(BVTHead obj);

/** Retrieve the Head's id.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetHeadID(BVTHead obj);

/** Retrieves a copy of a the name of the head. The head name is currently
 * set only at the factory, and is simply "Head" on many sonars. Only special
 * order sonars with multiple heads are likely to have a different name.<br>
 * The length of the name has no actual limit, though 80 characters
 * would seem to be more than enough.
 * \param obj Object pointer
 * \param buffer buffer to hold the null-terminated string to be passed back 
 * \param buffer_size total number of characters the passed buffer can hold 
 */
BVTSDK_EXPORT RetVal BVTHead_GetHeadName(BVTHead obj, char buffer[], int buffer_size);

/** Set the range to be acquired.  Before using this function, use function 
 * BVTHead_GetImageProcessingMethod() and test the return value. If the return 
 * value is IMAGE_PROCESSING_METHOD_B (1), then the start range must be set to zero.
 * \param obj Object pointer
 * \param start Start range in meters 
 * \param stop Stop range in meters 
 */
BVTSDK_EXPORT RetVal BVTHead_SetRange(BVTHead obj, float start, float stop);

/** Retrieve the current starting range in meters
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTHead_GetStartRange(BVTHead obj);

/** Retrieve the current stopping range in meters.
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTHead_GetStopRange(BVTHead obj);

/** Return the minimum allowable range for this sonar
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTHead_GetMinimumRange(BVTHead obj);

/** Return the maximum allowable range for this sonar
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTHead_GetMaximumRange(BVTHead obj);

#define BVTHEAD_FLUID_SALTWATER	(int)(0)

#define BVTHEAD_FLUID_FRESHWATER	(int)(1)

#define BVTHEAD_FLUID_OTHER	(int)(2)

/** Return the type of water the head is in.  The returned value will correspond to 
 * one of the FLUID_* constants.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetFluidType(BVTHead obj);

/** Set the type of water the head is in
 * \param obj Object pointer
 * \param fluid The fluid type (one of the FLUID_* constants) 
 */
BVTSDK_EXPORT RetVal BVTHead_SetFluidType(BVTHead obj, int fluid);

/** Return the speed of sound in water
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetSoundSpeed(BVTHead obj);

/** Set the speed of sound in water
 * \param obj Object pointer
 * \param speed Sound speed in water 
 */
BVTSDK_EXPORT RetVal BVTHead_SetSoundSpeed(BVTHead obj, int speed);

/** Return the additional analog gain in dB
 * Note: Most BlueView sonars don't support adjustable gain.
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTHead_GetGainAdjustment(BVTHead obj);

/** Set the additional analog gain. 
 * Note: Most BlueView sonars don't support adjustable gain.
 * \param obj Object pointer
 * \param gain Additional analog gain in dB 
 */
BVTSDK_EXPORT RetVal BVTHead_SetGainAdjustment(BVTHead obj, float gain);

/** Return the time variable gain in dB/meter
 * Note: Most BlueView sonars don't support TVG
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTHead_GetTVGSlope(BVTHead obj);

/** Set the  time variable analog gain. 
 * Note: Most BlueView sonars don't support TVG
 * \param obj Object pointer
 * \param tvg Time variable gain in dB/meter 
 */
BVTSDK_EXPORT RetVal BVTHead_SetTVGSlope(BVTHead obj, float tvg);

/** Return the center frequency(in Hz) of this head.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetCenterFreq(BVTHead obj);

/** Return the number of pings 'in' this head
 * A head attached to a file might have more than one ping recorded.  However, a networked sonar
 * will only have a single ping.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetPingCount(BVTHead obj);

/** Retrieve a Ping from the Head
 * If ping_num is less than 0, return the next ping in the file. Otherwise, load the specified ping.  
 * If the Head is attached to a 'live' sonar (network), then GetPing always acquires a new ping.
 * \param obj Object pointer
 * \param ping_num The ping number to return 
 * \param ping The returned Ping object
 */
BVTSDK_EXPORT RetVal BVTHead_GetPing(BVTHead obj, int ping_num, BVTPing* ping);

/** Write a ping to a file.
 * \param obj Object pointer
 * \param ping The ping to write out 
 */
BVTSDK_EXPORT RetVal BVTHead_PutPing(BVTHead obj, const BVTPing ping);

/** Turn off image processing	
 */
#define BVTHEAD_RES_OFF	(int)(0)

/** Process at low resolution 
 */
#define BVTHEAD_RES_LOW	(int)(1)

/** Process at med resolution 
 */
#define BVTHEAD_RES_MED	(int)(2)

/** Process at high resolution 
 */
#define BVTHEAD_RES_HIGH	(int)(3)

/** Select a good res for the current range automatically 
 */
#define BVTHEAD_RES_AUTO	(int)(4)

/** Set the image processing resolution. The RES_AUTO setting is highly
 * recommended, as it adapts via a formula according to the stop range,
 * whereas the other ranges are fixed values, and should only be used
 * in specialized cases, such as requesting high resolution for longer
 * distances (which will increase the processing time required to 
 * create the image). R-Theta images may use either this funtion or
 * SetRangeResolution(), depending on the degree of control required.
 * \param obj Object pointer
 * \param res Resolution constant (RES_*)
 */
BVTSDK_EXPORT RetVal BVTHead_SetImageRes(BVTHead obj, int res);

/** Requests a range resolution for R-Theta images. Also affects the
 * range resolution for RangeData. Note that the exact range resolution
 * may not be available, and the closest resolution will be set. The
 * actual resolution can be obtained by querying the returned image
 * or RangeData object.
 * \param obj Object pointer
 * \param resolution_in_meters Range resolution, in meters 
 */
BVTSDK_EXPORT RetVal BVTHead_SetRangeResolution(BVTHead obj, float resolution_in_meters);

/** Set the requested out image size
 * The processing code will attempt to process images at the specified size.
 * However, it doesn't guarantee that the final output will match this size.
 * NOTE: For R-Theta images, only the width is used, and the image will
 * be created with that exact width. Height will depend on the range,
 * and the resolution set. (See SetImageRes() and SetRangeResolution())
 * \param obj Object pointer
 * \param height The requested height 
 * \param width The requested width 
 */
BVTSDK_EXPORT RetVal BVTHead_SetImageReqSize(BVTHead obj, int height, int width);

/** Set the XY image size
 * This is a helper function to accompany the Ping's GetImageXY() function.
 * \param obj Object pointer
 * \param height The requested height 
 * \param width The requested width 
 */
BVTSDK_EXPORT RetVal BVTHead_SetXYImageSize(BVTHead obj, int height, int width);

/** Set the RTheta image width
 * This is a helper function to accompany the Ping's GetImageRTheta() function.
 * \param obj Object pointer
 * \param width The requested width 
 */
BVTSDK_EXPORT RetVal BVTHead_SetRThetaImageWidth(BVTHead obj, int width);

/** NOTE: this option is only valid for some sonars, in specific circumstances,
 * and should only be used on advice from the factory. <br>
 * By default, beamforming is done on the local system.  If you call this
 * function with enable=true, the SDK will request that the remote sonar
 * handle the majority of the beamforming. This operation applies the next 
 * time GetPing is called. <br>
 * \param obj Object pointer
 * \param enable Enable/Disable remote beamformer. (using 1 or 0 to enable or disable) 
 */
BVTSDK_EXPORT RetVal BVTHead_SetRemoteBeamForming(BVTHead obj, int enable);

/** NOTE: this option is only valid for some sonars, in specific circumstances,
 * and should only be used on advice from the factory. <br>
 * By default, the sonar sends data suitable for saving to a .son file.  If you 
 * are not saving files, AND are recieving processed data thru setting one of
 * the other options, you can call this function with enable=false to reduce the 
 * amount of network bandwidth needed. . This operation applies the next time GetPing 
 * is called.
 * \param obj Object pointer
 * \param enable Enable/Disable raw ping data. (using 1 or 0 to enable or disable) 
 */
BVTSDK_EXPORT RetVal BVTHead_SetRawDataSending(BVTHead obj, int enable);

/** NOTE: this option is only valid for some sonars, in specific circumstances,
 * and should only be used on advice from the factory. <br>
 * By default, image forming is done on the local system. 
 * If you call this function with en=true, the SDK will request that
 * the remote sonar handle the image forming. This option is slightly
 * different than remote beam-forming, with all processing done on
 * the sonar, and only the complete image sent over the network connection.
 * This operation applies the next time GetPing is called. <br>
 * \param obj Object pointer
 * \param enable Enable/Disable remote image forming. (using 1 or 0 to enable or disable) 
 */
BVTSDK_EXPORT RetVal BVTHead_SetRemoteImageForming(BVTHead obj, int enable);

/** Output a cartesian image 
 */
#define BVTHEAD_IMAGE_XY	(int)(0)

/** Output a Range/Theta image 
 */
#define BVTHEAD_IMAGE_RTHETA	(int)(1)

/** Set the type of image created by the BVTPing_GetImage() function.
 * NOTE: See SetImageReqSize() for important issues regarding image size.
 * If images are requested with the BVTPing_GetXYImage() or 
 * BVTPing_GetRThetaImage(), then this function is not needed.
 * \param obj Object pointer
 * \param type Image type constant (IMAGE_*) 
 */
BVTSDK_EXPORT RetVal BVTHead_SetImageType(BVTHead obj, int type);

/** Process an image with no filtering 
 */
#define BVTHEAD_IMAGE_FILTERFLAG_NONE	(int)(0)

/** Process an image with a 3x3 mean filter 
 */
#define BVTHEAD_IMAGE_FILTERFLAG_MEAN3X3	(int)(2)

/** Process an image with a 9x2 mean filter 
 */
#define BVTHEAD_IMAGE_FILTERFLAG_MEAN9x2	(int)(16)

/** Return the filter flags.  As of this version, if more than one flag is set, only the lowest-valued flag is used.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetImageFilterFlags(BVTHead obj);

/** Set the filter flags. As of this version, if more than one flag is set, only the lowest-valued flag is used.
 * \param obj Object pointer
 * \param flags Image filter flags (bit field) 
 */
BVTSDK_EXPORT RetVal BVTHead_SetImageFilterFlags(BVTHead obj, int flags);

/** ImageCalibrationA and ImageCalibrationB are used and should be set to appropriate values. 
 */
#define BVTHEAD_IMAGE_PROCESSING_METHOD_A	(int)(0)

/** ImageCalibrationA and ImageCalibrationB are not used. 
 */
#define BVTHEAD_IMAGE_PROCESSING_METHOD_B	(int)(1)

/** Inform the user about which type of image processing algorithm is being used.  
 * The returned value will correspond to one of the IMAGE_PROCESSING_METHOD_* constants.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetImageProcessingMethod(BVTHead obj);

/** Return the current image calibration value A.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetImageCalibrationA(BVTHead obj);

/** Set the image calibration value for A.
 * This function should only be used for older sonars.  Before using this function,
 * use function BVTHead_GetImageProcessingMethod() and test the return value.  If the return
 * value is IMAGE_PROCESSING_METHOD_A (0), then this function may be used, otherwise, do not
 * use this function.
 * NOTE: These values will be permanently saved on the sonar,
 * and the sonar's FLASH memory has limited write cycles available,
 * so this function should not be called often.
 * \param obj Object pointer
 * \param cal_value Image calibration value 
 */
BVTSDK_EXPORT RetVal BVTHead_SetImageCalibrationA(BVTHead obj, int cal_value);

/** Return the current image calibration value B.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetImageCalibrationB(BVTHead obj);

/** Set the image calibration value for B.
 * This function should only be used for older sonars.  Before using this function,
 * use function BVTHead_GetImageProcessingMethod() and test the return value.  If the return
 * value is IMAGE_PROCESSING_METHOD_A (0), then this function may be used, otherwise, do not
 * use this function.
 * NOTE: These values will be permanently saved on the sonar,
 * and the sonar's FLASH memory has limited write cycles available,
 * so this function should not be called often.
 * \param obj Object pointer
 * \param cal_value Image calibration value 
 */
BVTSDK_EXPORT RetVal BVTHead_SetImageCalibrationB(BVTHead obj, int cal_value);

/** This function should only be used for older sonars.  Before using this function,
 * use function BVTHead_GetImageProcessingMethod() and test the return value.  If the return
 * value is IMAGE_PROCESSING_METHOD_A (0), then this function may be used, otherwise, do not
 * use this function.
 * Starts the AutoImageCalibration process which computes ImageCalibrationA (and ImageCalibrationB, if appropriate).
 * \param obj Object pointer
 * \param MBSonar Set to 1 if sonar is of type MB, set to 0 for all other sonars 
 * \param reserved Should always be set to -1. Reserved for future use 
 */
BVTSDK_EXPORT RetVal BVTHead_DoAutoImageCalibration(BVTHead obj, int MBSonar, int reserved);

/** AutoImageCalibration has not yet been performed 
 */
#define BVTHEAD_NOT_COMPUTED	(int)(0)

/** AutoImageCalibration is in progress 
 */
#define BVTHEAD_IN_PROGRESS	(int)(1)

/** AutoImageCalibration process completed with valid results 
 */
#define BVTHEAD_COMPUTED_HFC_VALID	(int)(2)

/** AutoImageCalibration process completed with invalid results 
 */
#define BVTHEAD_COMPUTED_HFC_INVALID	(int)(3)

/** This function should only be used for older sonars.  Before using this function,
 * use function BVTHead_GetImageProcessingMethod() and test the return value.  If the return
 * value is IMAGE_PROCESSING_METHOD_A (0), then this function may be used, otherwise, do not
 * use this function.
 * Returns the state of the AutoImageCalibration processing. 
 * The returned ImageCalibrationA/B values will be set to -1 for unless the
 * function's return value is BVTHEAD_COMPUTED_HFC_VALID.
 * The returned ImageCalibrationB value is only computed for certain sonars and 
 * will have a value of -1 if not appropriate for the current sonar. 
 * \param obj Object pointer
 * \param ImageCalibrationA Value computed by the Auto Image Calibration process 
 * \param ImageCalibrationB Value computed by the Auto Image Calibration process 
 */
BVTSDK_EXPORT int BVTHead_GetAutoImageCalibrationStatus(BVTHead obj, int* ImageCalibrationA, int* ImageCalibrationB);

/** Sets the intensity value below which data is
 * considered to be noise. Values above this threshold are included in
 * the algorithm which attempts to determine the target edge. This is
 * NOT a simple threshold above which the first value encountered is
 * considered the target edge. This is the same intensity value returned
 * in a MagImage, with a range of an unsigned 16-bit integer.
 * If not set, the default is currently set to 1000. <br>
 * NOTE: This only applies to specialized BlueView sonars.
 * \param obj Object pointer
 * \param noise_threshold Threshold below which is considered noise 
 */
BVTSDK_EXPORT RetVal BVTHead_SetRangeDataThreshold(BVTHead obj, unsigned short noise_threshold);

/** Set the range at which to start processing range data.
 * \param obj Object pointer
 * \param start range in meters 
 */
BVTSDK_EXPORT RetVal BVTHead_SetTargetStartRange(BVTHead obj, float start);

/** By default, the sonar transmits pings.  This function allows the user to 
 * disable transmit.  This can be useful to get background noise measurements.
 * Note that this is not implemented on all sonars.
 * \param obj Object pointer
 * \param enableTx If 0, disable the sonar transmission of pings.
 */
BVTSDK_EXPORT RetVal BVTHead_SetTxEnable(BVTHead obj, int enableTx);

/** Stores a copy of the Orientation data with the in the head's MountingOrientation object, so the data
 * will be saved if the head is saved to a file.
 * \param obj Object pointer
 * \param orient Orientation data object to copy from 
 */
BVTSDK_EXPORT RetVal BVTHead_PutMountingOrientation(BVTHead obj, const BVTOrientation orient);

/** Retrieves a copy of the MountingOrientation object stored with this head. Note
 * that the data is copied out of the head into the local Orientation object,
 * a pointer to internal data is not returned. Thus, the Orientation object
 * may be used after the head is destroyed.
 * \param obj Object pointer
 * \param orient Orientation data object to copy the existing Orientation data to 
 */
BVTSDK_EXPORT RetVal BVTHead_GetMountingOrientationCopy(BVTHead obj, BVTOrientation* orient);

/** Stores a copy of the Orientation data with the in the head's MountingOrientation object, so the data
 * will be saved if the head is saved to a file.
 * This second (auxillary) Orientation object is optional. 
 * \param obj Object pointer
 * \param orient Orientation data object to copy from 
 */
BVTSDK_EXPORT RetVal BVTHead_PutAuxMountingOrientation(BVTHead obj, const BVTOrientation orient);

/** Retrieves a copy of the MountingOrientation object stored with this head. Note
 * that the data is copied out of the head into the local Orientation object,
 * a pointer to internal data is not returned. Thus, the Orientation object
 * may be used after the head is destroyed.
 * This second (auxillary) Orientation object is optional.  Calling this function on an unused auxillary Orientation will return all zeros. 
 * \param obj Object pointer
 * \param orient Orientation data object to copy the existing Orientation data to 
 */
BVTSDK_EXPORT RetVal BVTHead_GetAuxMountingOrientationCopy(BVTHead obj, BVTOrientation* orient);

#define BVTHEAD_MOUNT_UNKNOWN	(int)(0)

#define BVTHEAD_MOUNT_POLE	(int)(1)

#define BVTHEAD_MOUNT_TRIPOD	(int)(2)

#define BVTHEAD_MOUNT_ROV	(int)(3)

#define BVTHEAD_MOUNT_UUV	(int)(4)

#define BVTHEAD_MOUNT_OTHER	(int)(5)

/** Identifies the general configuration of how this data was collected.
 * \param obj Object pointer
 * \param type One of the MOUNT_* constants 
 */
BVTSDK_EXPORT RetVal BVTHead_SetMountType(BVTHead obj, int type);

/** Return the general configuration of data collection.  The returned value will correspond to 
 * one of the MOUNT_* constants.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetMountType(BVTHead obj);

#define BVTHEAD_SIDE_UNKNOWN	(int)(0)

#define BVTHEAD_SIDE_PORT	(int)(1)

#define BVTHEAD_SIDE_STARBOARD	(int)(2)

#define BVTHEAD_SIDE_DORSAL	(int)(3)

#define BVTHEAD_SIDE_VENTRAL	(int)(4)

#define BVTHEAD_SIDE_BOW	(int)(5)

#define BVTHEAD_SIDE_STERN	(int)(6)

#define BVTHEAD_SIDE_OTHER	(int)(7)

/** Helps identify how this data was collected.
 * \param obj Object pointer
 * \param side One of the SIDE_* constants 
 */
BVTSDK_EXPORT RetVal BVTHead_SetMountSide(BVTHead obj, int side);

/** Return some info about data collection.  The returned value will correspond to 
 * one of the SIDE_* constants.
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetMountSide(BVTHead obj);

/** This offset is calculated as MRU time - Sonar time;			
 * \param obj Object pointer
 * \param milliseconds Offset in milliseconds between the MRU's time reading and the Sonar's time reading. 
 */
BVTSDK_EXPORT RetVal BVTHead_SetMRUTimeOffset(BVTHead obj, int milliseconds);

/** This offset is calculated as MRU time - Sonar time;			
 * \param obj Object pointer
 */
BVTSDK_EXPORT int BVTHead_GetMRUTimeOffset(BVTHead obj);

/** 
 * \param obj Object pointer
 * \param bearing Bearing in degrees from pole mount to GPS antenna. 
 * \param distance Distance in meters from pole mount to GPS antenna. 
 */
BVTSDK_EXPORT RetVal BVTHead_SetPoleGPSBearing(BVTHead obj, float bearing, float distance);

/** 
 * \param obj Object pointer
 * \param bearing Bearing in degrees from pole mount to GPS antenna. 
 * \param distance Distance in meters from pole mount to GPS antenna. 
 */
BVTSDK_EXPORT RetVal BVTHead_GetPoleGPSBearing(BVTHead obj, float* bearing, float* distance);

/** 
 * \param obj Object pointer
 * \param bearing Bearing in degrees from pole mount to landmark. 
 */
BVTSDK_EXPORT RetVal BVTHead_SetPoleLandmarkBearing(BVTHead obj, float bearing);

/** Returns bearing in degrees from pole mount to landmark. 
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTHead_GetPoleLandmarkBearing(BVTHead obj);

/** This is used in tripod mount situations where the default/baseline/normal/center
 * position of the Head is not aligned with the tripod-mounted compass's
 * North direction.
 * This offset is calculated as MRU time - Sonar time;			
 * \param obj Object pointer
 * \param offset Offset in degrees from compass North. 
 */
BVTSDK_EXPORT RetVal BVTHead_SetHeadingOffset(BVTHead obj, float offset);

/** Returns offset in degrees from compass North. 
 * This is used in tripod mount situations where the default/baseline/normal/center
 * position of the Head is not aligned with the tripod-mounted compass's
 * North direction.
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTHead_GetHeadingOffset(BVTHead obj);

/** This is used to compute x,y,z offsets driven by the tilt position.
 * The manufacturer and model strings are limited to a maximum of 79 characters, not counting the terminating null characters.
 * \param obj Object pointer
 * \param manufacturer Manufacturer of pan/tilt unit e.g. ROS 
 * \param model pan/tilt model  
 * \param elbowOffset offset from tilt motor axis to center of sonar 
 */
BVTSDK_EXPORT RetVal BVTHead_setPanTiltAttributes(BVTHead obj, const char* manufacturer, const char* model, float elbowOffset);

/** Returns the string.
 * \param obj Object pointer
 */
BVTSDK_EXPORT const char* BVTHead_getPanTiltManufacturer(BVTHead obj);

/** Returns the string.
 * \param obj Object pointer
 */
BVTSDK_EXPORT const char* BVTHead_getPanTiltModel(BVTHead obj);

/** This is used to compute x,y,z offsets driven by the tilt position.
 * \param obj Object pointer
 */
BVTSDK_EXPORT float BVTHead_getPanTiltElbowOffset(BVTHead obj);

/** Helper function to retrieve the pan/tilt mount offsets.  
 * The panRotationOffset and tiltRotationOffset values should be subtracted 
 * from the X_axis_degrees (pan) and Y_axis_degrees (tilt) parameters 
 * of the BVTPing_GetPositionerRotations() function to obtain 
 * the same pan & tilt values displayed during data collection.
 * If verticalInverted is false(0), then the tilt value obtained in the 
 * step above must be multiplied by -1.0 to represent real-world tilt values.
 * \param obj Object pointer
 * \param tiltElbowVerticalOffset in meters 
 * \param tiltElbowHorizontalOffset in meters 
 * \param panRotationOffset offset to "home" position 
 * \param tiltRotationOffset offset to "home" position 
 * \param verticalInverted either 1 or 0, to indicate true or false, respectively 
 */
BVTSDK_EXPORT RetVal BVTHead_GetPanTiltMountOffsets(BVTHead obj, float* tiltElbowVerticalOffset, float* tiltElbowHorizontalOffset, float* panRotationOffset, float* tiltRotationOffset, int* verticalInverted);

/** Helper function to set the pan/tilt mount offsets.  
 * The panRotationOffset and tiltRotationOffset values should be subtracted 
 * from the X_axis_degrees (pan) and Y_axis_degrees (tilt) parameters 
 * of the BVTPing_GetPositionerRotations() function to obtain 
 * the same pan & tilt values displayed during data collection.
 * verticalInverted is set to false(0) if the pan/tilt device has been mounted in an inverted fashion.
 * \param obj Object pointer
 * \param tiltElbowVerticalOffset in meters 
 * \param tiltElbowHorizontalOffset in meters 
 * \param panRotationOffset offset to "home" position 
 * \param tiltRotationOffset offset to "home" position 
 * \param verticalInverted either 1 or 0, to indicate true or false, respectively 
 */
BVTSDK_EXPORT RetVal BVTHead_SetPanTiltMountOffsets(BVTHead obj, float tiltElbowVerticalOffset, float tiltElbowHorizontalOffset, float panRotationOffset, float tiltRotationOffset, int verticalInverted);

/** ** EXPERIMENTAL **  
 * Serializes the bytes of a ping into memory. The Head object cannot be a live sonar.
 * \param obj Object pointer
 * \param src The ping to copy into memory. 
 * \param buffer The buffer that will be resized to hold the ping. 
 */
BVTSDK_EXPORT RetVal BVTHead_PutPingIntoBytes(BVTHead obj, const BVTPing src, BVTDataBuffer buffer);

/** ** EXPERIMENTAL **  
 * Creates a Ping and deserializes its contents from a buffer.  The Head object cannot be a live sonar.
 * \param obj Object pointer
 * \param dst Pointer to a ping which will be created. 
 * \param data The buffer which holds the serialized representation of a Ping. 
 * \param length The size of the buffer in bytes. 
 */
BVTSDK_EXPORT RetVal BVTHead_GetPingFromBytes(BVTHead obj, BVTPing* dst, const void* data, unsigned int length);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif
