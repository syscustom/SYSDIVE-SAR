/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __CPP_BVTORIENTATION_H__
#define __CPP_BVTORIENTATION_H__

#include <string>
#include <bvt_cpp/bvt_retval.h>

namespace BVTSDK
{

/** Orientation contains various types of user-accessible parameters useful for specifying the position
 * and orientation of a Head relative to the vessel or ROV.   Ping and Head contain Orientation objects, but
 * this interface allows Orientation objects to be stored independently of a Ping or Head.
 * The Orientation objects can be created and destroyed as needed.   This allows Orientation objects 
 * to be pre-allocated and filled from various instrument sources. It also allows the data to be copied from one
 * Orientation object to the other.
 * NOTE: Orientation objects will only be saved to a sonar of type FILE. 
 */
class Orientation
{
public:
	/// Create the object
	Orientation()
	{ m_ptr = BVTOrientation_Create(); }

	/// Destroy the object
	~Orientation()
	{ BVTOrientation_Destroy(m_ptr); }

#ifndef DOXY_IGNORE
	Orientation(BVTOrientation ptr)
	{ m_ptr = ptr; }

	operator BVTOrientation()
	{ return m_ptr; }
	operator BVTOrientation*()
	{ return &m_ptr; }
	operator const BVTOrientation() const
	{ return m_ptr; }
#endif

	static const int OR_UNKNOWN	= 0;

	static const int OR_HEAD	= 1;

	static const int OR_POSITIONER	= 2;

	static const int OR_VEHICLE	= 3;

	static const int OR_LOCAL_LEVEL	= 4;

	static const int OR_MRU	= 5;

	static const int OR_GPS	= 6;

	static const int OR_IMU	= 7;

	static const int OR_ROV	= 8;

	static const int OR_UUV	= 9;

	static const int OR_OTHER	= 10;

	static const int OR_ROTATIONDIRECTION_UNKNOWN	= 0;

	static const int OR_ROTATIONDIRECTION_POSITIVE	= 1;

	static const int OR_ROTATIONDIRECTION_NEGATIVE	= 2;

	static const int OR_ROTATIONAXIS_UNKNOWN	= 0;

	static const int OR_ROTATIONAXIS_ROLL	= 1;

	static const int OR_ROTATIONAXIS_PITCH	= 2;

	static const int OR_ROTATIONAXIS_YAW	= 3;

	static const int OR_HEADORIENTATION_UNKNOWN	= 0;

	static const int OR_HEADORIENTATION_HORIZONTAL	= 1;

	static const int OR_HEADORIENTATION_VERTICAL	= 2;

	/** Position and orientation of target (e.g. HEAD) relative to source (e.g. POSITIONER).
	 * \param source one of the OR_* constants 
	 * \param target one of the OR_* constants 
	 * \param X_axis_degrees rotation about the X axis 
	 * \param Y_axis_degrees rotation about the Y axis 
	 * \param Z_axis_degrees rotation about the Z axis 
	 * \param X_axis_offset distance of target from source in the X axis (meters)  
	 * \param Y_axis_offset distance of target from source in the Yaxis (meters)  
	 * \param Z_axis_offset distance of target from source in the Z axis (meters)  
	 */
	RetVal SetData(int source, int target, double X_axis_degrees, double Y_axis_degrees, double Z_axis_degrees, double X_axis_offset, double Y_axis_offset, double Z_axis_offset)
	{
		return BVTOrientation_SetData( m_ptr, source, target, X_axis_degrees, Y_axis_degrees, Z_axis_degrees, X_axis_offset, Y_axis_offset, Z_axis_offset );
	}

	/** Position of the SOURCE relative to the TARGET.
	 * \param source one of the OR_* constants 
	 * \param target one of the OR_* constants 
	 * \param X_axis_degrees rotation about X axis 
	 * \param Y_axis_degrees rotation about Y axis 
	 * \param Z_axis_degrees rotation about Z axis 
	 * \param X_axis_offset distance of target from source in the X axis (meters) 
	 * \param Y_axis_offset distance of target from soruce in the Y axis (meters) 
	 * \param Z_axis_offset distance of target from soruce in the Z axis(meters) 
	 */
	RetVal GetData(int* source, int* target, double* X_axis_degrees, double* Y_axis_degrees, double* Z_axis_degrees, double* X_axis_offset, double* Y_axis_offset, double* Z_axis_offset)
	{
		return BVTOrientation_GetData( m_ptr, source, target, X_axis_degrees, Y_axis_degrees, Z_axis_degrees, X_axis_offset, Y_axis_offset, Z_axis_offset );
	}

	/** head_orientation describes how the sonar is oriented in the pan/tilt unit.  
	 * Vertical indicates that the transducer plane is parallel to the pan/tilt unit's base (pan) motor.
	 * Horizontal indicates that the transducer plane is parallel to the elbow (tilt) motor.
	 * Describes how an increase/decrease in pan (x_raw_direction) and tilt (y_raw_direction) position changes the sonar position in the vessel coordinate system. 
	 * Blueview convention is that the x axis is the hardware base motor which pans the sonar and the y axis is the elbow motor which tilts the sonar.
	 * The z axis is currently not used.
	 * \param head_orientation one of the OR_HEADORIENTATION_* constants 
	 * \param x_raw_direction one of the OR_ROTATIONDIRECTION_* constants 
	 * \param x_axis_affected one of the OR_ROTATIONAXIS_* constants 
	 * \param x_axis_direction one of the OR_ROTATIONDIRECTION_* constants 
	 * \param y_raw_direction one of the OR_ROTATIONDIRECTION_* constants 
	 * \param y_axis_affected one of the OR_ROTATIONAXIS_* constants 
	 * \param y_axis_direction one of the OR_ROTATIONDIRECTION_* constants 
	 * \param z_raw_direction one of the OR_ROTATIONDIRECTION_* constants 
	 * \param z_axis_affected one of the OR_ROTATIONAXIS_* constants 
	 * \param z_axis_direction one of the OR_ROTATIONDIRECTION_* constants 
	 */
	RetVal SetPanTiltCalibrationData(int head_orientation, int x_raw_direction, int x_axis_affected, int x_axis_direction, int y_raw_direction, int y_axis_affected, int y_axis_direction, int z_raw_direction, int z_axis_affected, int z_axis_direction)
	{
		return BVTOrientation_SetPanTiltCalibrationData( m_ptr, head_orientation, x_raw_direction, x_axis_affected, x_axis_direction, y_raw_direction, y_axis_affected, y_axis_direction, z_raw_direction, z_axis_affected, z_axis_direction );
	}

	/** head_orientation describes how the sonar is oriented in the pan/tilt unit.  
	 * Vertical indicates that the transducer plane is parallel to the pan/tilt unit's base (pan) motor.
	 * Horizontal indicates that the transducer plane is parallel to the elbow (tilt) motor.
	 * Describes how an increase/decrease in pan (x_raw_direction) and tilt (y_raw_direction) position changes the sonar position in the vessel coordinate system. 
	 * Blueview convention is that the x axis is the hardware base motor which pans the sonar and the y axis is the elbow motor which tilts the sonar.
	 * The z axis is currently not used.
	 * \param head_orientation one of the OR_HEADORIENTATION_* constants 
	 * \param x_raw_direction one of the OR_ROTATIONDIRECTION_* constants 
	 * \param x_axis_affected one of the OR_ROTATIONAXIS_* constants 
	 * \param x_axis_direction one of the OR_ROTATIONDIRECTION_* constants 
	 * \param y_raw_direction one of the OR_ROTATIONDIRECTION_* constants 
	 * \param y_axis_affected one of the OR_ROTATIONAXIS_* constants 
	 * \param y_axis_direction one of the OR_ROTATIONDIRECTION_* constants 
	 * \param z_raw_direction one of the OR_ROTATIONDIRECTION_* constants 
	 * \param z_axis_affected one of the OR_ROTATIONAXIS_* constants 
	 * \param z_axis_direction one of the OR_ROTATIONDIRECTION_* constants 
	 */
	RetVal GetPanTiltCalibrationData(int* head_orientation, int* x_raw_direction, int* x_axis_affected, int* x_axis_direction, int* y_raw_direction, int* y_axis_affected, int* y_axis_direction, int* z_raw_direction, int* z_axis_affected, int* z_axis_direction)
	{
		return BVTOrientation_GetPanTiltCalibrationData( m_ptr, head_orientation, x_raw_direction, x_axis_affected, x_axis_direction, y_raw_direction, y_axis_affected, y_axis_direction, z_raw_direction, z_axis_affected, z_axis_direction );
	}

	/** Return the timestamp in seconds since 00:00:00 UTC, January 1, 1970 
	 * The timestamp is a standard UNIX time stamp. This is 
	 * a similar value to that returned by the time() C standard library 
	 * function. In fact, the only difference is the addition of fractional seconds.
	 */
	double GetTimestamp()
	{
		return BVTOrientation_GetTimestamp( m_ptr );
	}

	/** Set the time stamp.  
	 * \param sec Timestamp in seconds since 00:00:00 UTC, January 1, 1970 
	 */
	RetVal SetTimestamp(double sec)
	{
		return BVTOrientation_SetTimestamp( m_ptr, sec );
	}


private:
	BVTOrientation m_ptr;

	/// Prevent this object from being coppied
	Orientation(const Orientation&);
	Orientation&operator=(const Orientation&);
};
}

#endif
