/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __CPP_BVTEVENTMARK_H__
#define __CPP_BVTEVENTMARK_H__

#include <string>
#include <bvt_cpp/bvt_retval.h>

namespace BVTSDK
{

/** An EventMark allows the user to insert arbitrary information into a sonar file.  The user can
 * store two strings, one called a "Key" string and the other a "Text" string, in an EventMark. 
 * The EventMarks are stored and retrieved independently of Heads or Pings.
 * NOTE: EventMark objects will only be saved to a sonar of type FILE. 
 */
class EventMark
{
public:
	/// Create the object
	EventMark()
	{ m_ptr = BVTEventMark_Create(); }

	/// Destroy the object
	~EventMark()
	{ BVTEventMark_Destroy(m_ptr); }

#ifndef DOXY_IGNORE
	EventMark(BVTEventMark ptr)
	{ m_ptr = ptr; }

	operator BVTEventMark()
	{ return m_ptr; }
	operator BVTEventMark*()
	{ return &m_ptr; }
	operator const BVTEventMark() const
	{ return m_ptr; }
#endif

	/** Return the timestamp in seconds since 00:00:00 UTC, January 1, 1970 
	 * The timestamp is a standard UNIX time stamp. This is 
	 * a similar value to that returned by the time() C standard library 
	 * function. In fact, the only difference is the addition of fractional seconds.
	 */
	double GetTimestamp()
	{
		return BVTEventMark_GetTimestamp( m_ptr );
	}

	/** Return the number of characters stored in the Key string.  You'll need to allocate a
	 * character buffer of length GetKeyStringLength()+1 to retrieve the entire Key.
	 */
	int GetKeyStringLength()
	{
		return BVTEventMark_GetKeyStringLength( m_ptr );
	}

	/** Retrieves a copy of the EventMark's Key string.
	 * \param buffer buffer to hold the null-terminated string to be passed back 
	 * \param buffer_size total number of characters the passed buffer can hold 
	 */
	RetVal GetKeyString(char buffer[], int buffer_size)
	{
		return BVTEventMark_GetKeyString( m_ptr, buffer, buffer_size );
	}

	/** Return the number of characters stored in the Text string.  You'll need to allocate a
	 * character buffer of length GetTextStringLength()+1 to retrieve the entire Key.
	 */
	int GetTextStringLength()
	{
		return BVTEventMark_GetTextStringLength( m_ptr );
	}

	/** Retrieves a copy of the EventMark's Text string.
	 * \param buffer buffer to hold the null-terminated string to be passed back 
	 * \param buffer_size total number of characters the passed buffer can hold 
	 */
	RetVal GetTextString(char buffer[], int buffer_size)
	{
		return BVTEventMark_GetTextString( m_ptr, buffer, buffer_size );
	}

	/** Return the "ping-by-time" number associated with the EventMark.
	 * This is typically the ping immediately before the EventMark was created.
	 */
	int GetPingNum()
	{
		return BVTEventMark_GetPingNum( m_ptr );
	}


private:
	BVTEventMark m_ptr;

	/// Prevent this object from being coppied
	EventMark(const EventMark&);
	EventMark&operator=(const EventMark&);
};
}

#endif
