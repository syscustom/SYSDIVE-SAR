/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __CPP_BVTSONARDISCOVERYAGENT_H__
#define __CPP_BVTSONARDISCOVERYAGENT_H__

#include <string>
#include <bvt_cpp/bvt_retval.h>

namespace BVTSDK
{

/** The SonarDiscoveryAgent is used to discover any BlueView
 * sonars resident on a network.
 */
class SonarDiscoveryAgent
{
public:
	/// Create the object
	SonarDiscoveryAgent()
	{ m_ptr = BVTSonarDiscoveryAgent_Create(); }

	/// Destroy the object
	~SonarDiscoveryAgent()
	{ BVTSonarDiscoveryAgent_Destroy(m_ptr); }

#ifndef DOXY_IGNORE
	SonarDiscoveryAgent(BVTSonarDiscoveryAgent ptr)
	{ m_ptr = ptr; }

	operator BVTSonarDiscoveryAgent()
	{ return m_ptr; }
	operator BVTSonarDiscoveryAgent*()
	{ return &m_ptr; }
	operator const BVTSonarDiscoveryAgent() const
	{ return m_ptr; }
#endif

	/** Causes the SonarDiscoveryAgent to begin probing the network for sonars.
	 */
	RetVal Start()
	{
		return BVTSonarDiscoveryAgent_Start( m_ptr );
	}

	/** Number of sonars discovered.
	 */
	int GetSonarCount()
	{
		return BVTSonarDiscoveryAgent_GetSonarCount( m_ptr );
	}

	/** Returns the Host IP address (as a null-terminated string) for the specified sonar.
	 * The SonarNum parameter is zero-based, that is, if GetSonarCount() returned a value of 3, then valid SonarNum values are 0, 1, and 2.
	 * A buffer size of 20 characters should be sufficient for the HostBuffer.
	 * \param SonarNum The sonar number to return 
	 * \param HostBuffer buffer to hold the null-terminated string to be passed back 
	 * \param HostBufferSize total number of characters the passed buffer can hold 
	 */
	RetVal GetSonarInfo(int SonarNum, char HostBuffer[], int HostBufferSize)
	{
		return BVTSonarDiscoveryAgent_GetSonarInfo( m_ptr, SonarNum, HostBuffer, HostBufferSize );
	}


private:
	BVTSonarDiscoveryAgent m_ptr;

	/// Prevent this object from being coppied
	SonarDiscoveryAgent(const SonarDiscoveryAgent&);
	SonarDiscoveryAgent&operator=(const SonarDiscoveryAgent&);
};
}

#endif
