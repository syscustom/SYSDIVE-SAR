/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __CPP_BVTLOGGER_H__
#define __CPP_BVTLOGGER_H__

#include <string>
#include <bvt_cpp/bvt_retval.h>

namespace BVTSDK
{

/** The SDK is capable of producing a significant amount of debugging 
 * output.  The Logger object exists to allow the user to control 
 * (or disable) the output.  Users can also use Logger to add their
 * own custom log messages.
 */
class Logger
{
public:
	/** Don't log anything. 
	 */
	static const int NONE	= -1;

	/** Log critical events. 
	 */
	static const int CRITICAL	= 0;

	static const int WARNING	= 1;

	static const int STATUS	= 2;

	/** Set the log threshold level.  Events above level
	 * will be logged to the target.
	 * \param level Log level 
	 */
	static void SetLevel(int level)
	{
		BVTLogger_SetLevel( level );
	}

	/** The log target can be a filename, "stdout", "stderr", or "null".
	 * If null is specified, log output is disabled.
	 * \param target File/device to log output to 
	 */
	static RetVal SetTarget(std::string target)
	{
		return BVTLogger_SetTarget( target.c_str() );
	}

	/** Write a message to the log.
	 * \param level The log level of the message 
	 * \param message A string to log 
	 */
	static void Write(int level, std::string message)
	{
		BVTLogger_Write( level, message.c_str() );
	}

	/** Write a message to the log. This function is similar to printf in 
	 * that the format parameter controls how the argument list is interpreted. 
	 * See the printf documentation for more information.
	 * \param level The log level of the message 
	 * \param format A printf-style string to log 
	 */
	static void WriteFormatted(int level, std::string format, ...)
	{
		BVTLogger_WriteFormatted( level, format.c_str(), NULL );
	}


};
}

#endif
